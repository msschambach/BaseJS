class t{constructor(t){this.name=t.name,this.data=t.data,this.$storage=t.storage}toString(){return String.prototype.isPrototypeOf(this.data)||"string"==typeof this.data?this.data:JSON.stringify(this.data)}save(){let t;this.data instanceof Object&&"string"!=typeof this.data?(t=JSON.stringify(this.data),this.$storage.setItem(this.name,t)):this.$storage.setItem(this.name,this.data)}delete(){this.$storage.removeItem(this.name)}}class e{constructor(t=!0){t?(this.$storage=window.localStorage,this.mode="localStorage"):(this.$storage=window.sessionStorage,this.mode="sessionStorage")}get length(){return this.$storage.length}parse(t){try{return JSON.parse(t)}catch(t){return null}}find(e){const s=this.$storage.getItem(e);return s?new t({storage:this.$storage,name:e,data:this.parse(s)||s}):null}findAll(){const t=[];for(let e in this.$storage){const s=this.find(e);s&&t.push(s)}return t}findAt(t,e=!0){return e?this.find(this.$storage.key(t)||""):this.$storage.key(t)}indexOf(t){let e=0;for(let s in this.$storage){if(s===t)return e;e++}}set(t,e){let s;e instanceof Object&&"string"!=typeof e?(s=JSON.stringify(e),this.$storage.setItem(t,s)):this.$storage.setItem(t,e)}delete(t){this.$storage.removeItem(t)}deleteAll(){this.$storage.clear()}log(t){var e;console.log(null===(e=this.find(t))||void 0===e?void 0:""+e)}}export{e as BrowserStore,t as Record};
